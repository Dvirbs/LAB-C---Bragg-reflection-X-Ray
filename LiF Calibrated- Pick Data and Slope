% showing analyze peak center LIF results

theta=    [8.2000, 9.3,   17.4,         19.9,  27.1];


theta_err = 0.1*0.3*ones(size(theta));

sin_theta = sin(theta * pi / 180);

sin_theta_err_radians = 0.1* pi / 180 *  abs(cos(T.theta*(pi/180)));
sin_theta_err_dagrees = 0.1* abs(cos(T.theta*(pi/180)));

theta_calibrated = asin(sin(theta * pi / 180)+5.8/401.9)*180/pi;

theta_calibrated_err = sqrt((cos(theta).*theta_err./(sqrt(1-(5.8/401.9+sin(theta)).^2))).^2+((1/401.9)*0.42./(sqrt(1-(5.8/401.9+sin(theta)).^2))).^2+((5.8/401.9.^2)*1.4./(sqrt(1-(5.8/401.9+sin(theta)).^2))).^2);

sin_theta_calibrated = sin(theta_calibrated * pi / 180);
sin_theta_calibrated_err_radians = 0.1* pi / 180 *  abs(cos(T.theta_calibrated*(pi/180)));


Line =     {'K_b', 'K_a',  'K_b',      'K_a',  'K_b'};
n =        [1,       1,      2,           2,    3];
n_lambda = [63.06, 71.08, 126.12,  142.16, 189.18];



% Calculate additional variables and create table
T = table(theta', theta_err',theta_calibrated',theta_calibrated_err', sin_theta_calibrated',sin_theta_calibrated_err_radians, sin_theta',sin_theta_err_radians, sin_theta_err_dagrees, Line', n', n_lambda', 'VariableNames', {'theta','theta_err','theta_calibrated','theta_calibrated_err', 'sin_theta_calibrated','sin_theta_calibrated_err_radians', 'sin_theta','sin_theta_err_radians','sin_theta_err_dagrees', 'Line', 'n', 'n_lambda'});

% Add a new column to the table
T.a0 = T.n_lambda ./ T.sin_theta;
T.a0_eror = T.n_lambda .* cos(T.theta*pi/180) .* (T.theta_err) ./ (T.sin_theta).^2;
T.a0_calibrated = T.n_lambda ./ T.sin_theta_calibrated;
T.a0_calibrated_eror = T.n_lambda .* cos(T.theta_calibrated*pi/180) .* (T.theta_err*pi/180) ./ (T.sin_theta_calibrated).^2;




% Display the table
disp(T)

x = T.sin_theta;
y = T.n_lambda;
[p, S] = polyfit(x, y, 1);  % Fit a linear polynomial to the data (x,y) and store the coefficients and fitting information in p and S, respectively
% p is a vector containing the coefficients of the polynomial
% S is a structure that contains information about the fitting process. Specifically, S contains the following fields:
    % R: the upper triangular matrix in the QR decomposition of the Vandermonde matrix, which is used to compute the coefficients p.
    % df: the degrees of freedom, which is the number of data points minus the number of coefficients in the polynomial.
f = polyval(p, x);          % Evaluate the polynomial at the x values to get the fitted values of y

% Extract the standard errors of the slope and intercept from S
slope_std_err = sqrt(diag(inv(S.R)*inv(S.R)')*S.normr^2/S.df); % Calculate the standard error of the slope using the formula sqrt(diag(inv(R'R))*normr^2/df), where R is the upper triangular matrix in the QR decomposition of the Vandermonde matrix, and df is the degrees of freedom
intercept_std_err = slope_std_err * sqrt(sum(x.^2) / length(x)); % Calculate the standard error of the intercept using the formula se(c2) = se(slope) * sqrt(sum(x^2)/n), where n is the number of data points

disp(['a_0 = ', num2str(p(1))]);
disp(['b = ', num2str(p(2))]);
disp(['Standard error of slope = ', num2str(slope_std_err(1))]);
disp(['Standard error of intercept = ', num2str(intercept_std_err(1))]);
a_0 = p(1);
b = p(2);
c1_err = slope_std_err(1);
c2_err = intercept_std_err(1);

eq = ['$n\lambda = ', 'a_0*', '\sin\theta + ', 'b', '$'];
eq_err = ['$a_0 = ', num2str(a_0), ' \pm ', num2str(c1_err), '$, $b = ', num2str(b), ' \pm ', num2str(c2_err), '$'];

figure('Name', 'Linear Fit Bragg Law LiF', 'NumberTitle', 'off');
set(gca, 'FontSize', 12);

% Define the x and y error values
x_err = sin_theta_err_radians;
%y_err = c2_err*ones(size(y));

%errorbar(x, y, y_err, y_err, x_err, x_err);
errorbar(x, y, x_err, 'horizontal', 'o', 'MarkerSize', 8, 'LineWidth', 1, 'Color', [0 0.4470 0.7410], 'MarkerFaceColor', 'auto', 'MarkerEdgeColor', 'none', 'CapSize', 3);

hold on;
plot(x, p(1)*x + p(2), 'r-', 'LineWidth', 0.5); % Change the line width to 0.5
grid on;
xlabel('$\sin\theta$', 'Interpreter', 'latex', 'FontSize', 18);
ylabel('$n\lambda$', 'Interpreter', 'latex', 'FontSize', 18);
title('Linear Fit Bragg Law LiF', 'FontSize', 20);
legend({'Data', 'Linear fit'}, 'Location', 'northwest', 'Interpreter', 'latex', 'FontSize', 14);

text(0.11, 0.885*max(y), eq, 'Interpreter', 'latex', 'FontSize', 16, 'BackgroundColor', 'white', 'EdgeColor', 'black', 'LineWidth', 1);
text(0.11, 0.83*max(y), eq_err, 'Interpreter', 'latex', 'FontSize', 9, 'BackgroundColor', 'white', 'EdgeColor', 'black', 'LineWidth', 1);


